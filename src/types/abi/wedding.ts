/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DivorceProposed = ContractEventLog<{
  proposedBy: string;
  0: string;
}>;
export type WithdrawalProposed = ContractEventLog<{
  token: string;
  receiver: string;
  amount: string;
  proposedBy: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface Wedding extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Wedding;
  clone(): Wedding;
  methods: {
    activeWithdrawalProposal(): NonPayableTransactionObject<{
      token: string;
      receiver: string;
      amount: string;
      proposedBy: string;
      timestamp: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    agreeWithDivorce(): NonPayableTransactionObject<void>;

    decisionTimeDivorce(): NonPayableTransactionObject<string>;

    decisionTimeWithdrawal(): NonPayableTransactionObject<string>;

    disputeDivorce(): NonPayableTransactionObject<void>;

    divorceDisputed(): NonPayableTransactionObject<boolean>;

    divorceProposedBy(): NonPayableTransactionObject<string>;

    divorceTimestamp(): NonPayableTransactionObject<string>;

    executeWithdrawalProposal(): NonPayableTransactionObject<void>;

    firstPartner(): NonPayableTransactionObject<string>;

    getFundsAfterDivorce(_tokens: string[]): NonPayableTransactionObject<void>;

    partsTakenAfterDivorce(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    percentageToProposingWhenDisputed(): NonPayableTransactionObject<string>;

    proposeDivorce(): NonPayableTransactionObject<void>;

    proposeWithdrawal(
      _token: string,
      _receiver: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    rejectWithdrawalProposal(): NonPayableTransactionObject<void>;

    secondPartner(): NonPayableTransactionObject<string>;

    withdrawalProposalPending(): NonPayableTransactionObject<boolean>;
  };
  events: {
    DivorceProposed(cb?: Callback<DivorceProposed>): EventEmitter;
    DivorceProposed(
      options?: EventOptions,
      cb?: Callback<DivorceProposed>
    ): EventEmitter;

    WithdrawalProposed(cb?: Callback<WithdrawalProposed>): EventEmitter;
    WithdrawalProposed(
      options?: EventOptions,
      cb?: Callback<WithdrawalProposed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "DivorceProposed", cb: Callback<DivorceProposed>): void;
  once(
    event: "DivorceProposed",
    options: EventOptions,
    cb: Callback<DivorceProposed>
  ): void;

  once(event: "WithdrawalProposed", cb: Callback<WithdrawalProposed>): void;
  once(
    event: "WithdrawalProposed",
    options: EventOptions,
    cb: Callback<WithdrawalProposed>
  ): void;
}
