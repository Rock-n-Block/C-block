/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CanSetFeeReceiverEdited = ContractEventLog<{
  account: string[];
  _canSetFeeReceiver: boolean[];
  0: string[];
  1: boolean[];
}>;
export type CanSetPriceEdited = ContractEventLog<{
  account: string[];
  _canSetPrice: boolean[];
  0: string[];
  1: boolean[];
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface Controller extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Controller;
  clone(): Controller;
  methods: {
    canSetFeeReceiver(arg0: string): NonPayableTransactionObject<boolean>;

    canSetPrice(arg0: string): NonPayableTransactionObject<boolean>;

    editCanSetFeeReceiver(
      account: string[],
      _canSetFeeReceiver: boolean[]
    ): NonPayableTransactionObject<void>;

    editCanSetPrice(
      account: string[],
      _canSetPrice: boolean[]
    ): NonPayableTransactionObject<void>;

    feeReceiver(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setFeeReceiver(_feeReceiver: string): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    CanSetFeeReceiverEdited(
      cb?: Callback<CanSetFeeReceiverEdited>
    ): EventEmitter;
    CanSetFeeReceiverEdited(
      options?: EventOptions,
      cb?: Callback<CanSetFeeReceiverEdited>
    ): EventEmitter;

    CanSetPriceEdited(cb?: Callback<CanSetPriceEdited>): EventEmitter;
    CanSetPriceEdited(
      options?: EventOptions,
      cb?: Callback<CanSetPriceEdited>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "CanSetFeeReceiverEdited",
    cb: Callback<CanSetFeeReceiverEdited>
  ): void;
  once(
    event: "CanSetFeeReceiverEdited",
    options: EventOptions,
    cb: Callback<CanSetFeeReceiverEdited>
  ): void;

  once(event: "CanSetPriceEdited", cb: Callback<CanSetPriceEdited>): void;
  once(
    event: "CanSetPriceEdited",
    options: EventOptions,
    cb: Callback<CanSetPriceEdited>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
